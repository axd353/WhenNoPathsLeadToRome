import os
import pandas as pd
import sys
sys.path.append('/home/anirban/projects/benchmarkStories')

from utils.StoryGRaphPLotter import StoryGraphPlotter

class StoryGraphBatchGenerator:
    def __init__(self, output_dir):
        """
        Initialize the batch generator with the directory where graph images will be saved.
        The directory is created if it does not exist.
        
        Parameters:
          output_dir (str): The path to the directory where images will be stored.
        """
        self.output_dir = output_dir
        os.makedirs(self.output_dir, exist_ok=True)
        # Instantiate a StoryGraphPlotter.
        self.plotter = StoryGraphPlotter()
    
    def generate_graphs(self, df):
        """
        Iterates over a DataFrame (where each row represents a story dictionary),
        generates one graph image per unique story_index, saves the image in the output directory,
        and adds a new column 'graph_path' to the DataFrame containing the image file path.
        
        Parameters:
          df (pd.DataFrame): DataFrame where each row corresponds to a story.
            Expected columns include: "entities", "story_edges", "edge_types", "models", etc.
            Must contain 'story_index' column added by build_dataset().
        
        Returns:
          pd.DataFrame: The updated DataFrame with an additional "graph_path" column.
        """
        # Create mapping from story_index to graph path
        index_to_path = {}
        
        # Process one random story per story_index group
        for story_index, group in df.groupby('story_index'):
            # Select first story in group (could use random.choice if preferred)
            representative_story = group.iloc[0].to_dict()
            
            file_name = f"story_index{story_index}.png"
            save_path = os.path.join(self.output_dir, file_name)
            
            # Generate graph only once per story_index
            self.plotter.plot_story(representative_story, save_path=save_path, no_show=True)
            index_to_path[story_index] = save_path
        
        # Assign paths based on story_index mapping
        df["graph_path"] = df["story_index"].map(index_to_path)
        return df

# Example usage:
if __name__ == "__main__":
    # Suppose you have a DataFrame "df_stories" where each row is a story.
    # For demonstration, let's assume we load it from a CSV file.
    # df_stories = pd.read_csv("path/to/your/stories.csv")
    #
    # For this example, we assume the DataFrame is already available.
    # Create an output directory.
    output_dir = "/home/anirban/projects/benchmarkStories/graph_images"
    batch_generator = StoryGraphBatchGenerator(output_dir)
    
    # For demonstration, create a dummy DataFrame with one story.
    # In practice, your DataFrame should have the columns generated by your benchmark builder.
    dummy_data = {
        "entities": [[0, 1, 2, 3, 4, 5]],
        "story_edges": [[(3,5), (2,3), (4,1)]],
        "edge_types": [["nephew_of", "father_of", "brother_of"]],
        "models": [[{"Function('brother_of', [Number(4), Number(0)], True)",
                     "Function('son_of', [Number(3), Number(2)], True)"}]],
        "query_edge": [(3,2)],
        "query_relation": ["son_of"],
        "program": ["dummy program"],
        "num_answer_sets": [1]
    }
    df_stories = pd.DataFrame(dummy_data)
    updated_df = batch_generator.generate_graphs(df_stories)
    print("Updated DataFrame with graph paths:")
    print(updated_df)
